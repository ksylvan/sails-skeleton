#!/bin/sh
#
# docker-based workflow, using node.js based images
#
# Run this in the directory that you want to end
# up as /usr/src/app in the node container.
#
# Then follow the instructions.
#
# Usage: workflow [extra args for docker]
#
# Use IMAGE environment variable to start a different container.
# Set the WF_PERSIST environment variable to non-empty to not use
# the usual throw-away container (basically, don't use "--rm")
#

here=$(pwd)
me=$(basename $0)
cd $(dirname $0); there=$(pwd); cd $here

EXTRA_ARGS=${1+"$@"}
IMAGE=${IMAGE:-node}
ARGS="-v $here:/usr/src/app -w /usr/src/app"
if [ -z "$WF_PERSIST" ]; then RM_FLAG="--rm"; fi

if [ $me = "workflow" ]
then
  echo "About to run $IMAGE container for development."
  echo "Using args: $ARGS"
  echo "Current directory becomes /usr/src/app"
  echo ""
  echo "On Linux, continue by executing /tmp/setup in the container."
  echo "This will preserve file ownership."
  echo ""
  echo "Then continue using commands in the container."
  echo ""
  mkdir -p .tmp$$; echo $(id -nu; id -u; id -ng; id -g) > .tmp$$/ids
  docker run $RM_FLAG -it -v $there/$me:/tmp/setup -v $here/.tmp$$/ids:/tmp/ids \
    $ARGS $EXTRA_ARGS $IMAGE /bin/bash
  rm -rf .tmp$$
elif [ "$me" = "setup" ]
then
  echo "Running in the container as root"
  read user_name user_id group_name group_id < /tmp/ids
  if grep -q $user_name /etc/passwd
  then
    echo "User $user_name already created. Doing nothing."
  else
    addgroup --gid $group_id $group_name
    adduser --uid $user_id $user_name \
      --gid $group_id --shell /bin/bash \
      --disabled-password --gecos ""
  fi
  cd /usr/src/app
  echo ""
  echo "Once the shell starts up, continue doing work in the container"
  echo ""
  su $user_name
fi
