#!/bin/sh
#
# docker-based workflow, using node.js based images
#
# Run this in the directory that you want to end
# up as /usr/src/app in the node container.
#
# Then follow the instructions.
#
# Usage: workflow [extra args for docker]
#
# Use IMAGE environment variable to start a different container.
# Set the WF_PERSIST environment variable to non-empty to not use
# the usual throw-away container (basically, don't use "--rm")
#

here=$(pwd)
me=$(basename $0)
cd $(dirname $0); there=$(pwd); cd $here

EXTRA_ARGS=${1+"$@"}
IMAGE=${IMAGE:-node}
ARGS="-v $here:/usr/src/app -w /usr/src/app"
if [ -z "$WF_PERSIST" ]; then RM_FLAG="--rm"; fi

os=$(uname)

echo "About to run $IMAGE container for development."
echo "Using args: $ARGS"
echo "Extra args: $EXTRA_ARGS"
echo "Current directory becomes /usr/src/app"
echo ""

if [ "$os" = Linux ]; then
  echo "On Linux, continue by executing /tmp/setup in the container."
  echo "This will preserve file ownership."
  echo ""
  echo "Then continue using commands in the container."
  echo ""
  TMP=/tmp/setup$$
  user_name=$(id -nu); user_id=$(id -u); user_group=$(id -g)
  cat > $TMP <<EOF
#!/bin/sh
echo "Running in the container as root"
if grep -q $user_name /etc/passwd; then
  echo "User $user_name already created. Doing nothing."
else
  addgroup --gid $user_group $user_name
  adduser --uid $user_id $user_name --gid $user_group \
    --shell /bin/bash --disabled-password --gecos ""
fi
cd /usr/src/app
echo ""
echo "Once the shell starts up, continue doing work in the container."
echo ""
su $user_name
EOF
  chmod +x $TMP
  if [ -n "$(which getenforce 2>/dev/null)" ]; then
    chcon -t svirt_sandbox_file_t $TMP # For Fedora/CentOS
  fi
  ARGS="$ARGS -v $TMP:/tmp/setup"
fi

docker run $RM_FLAG -it $ARGS $EXTRA_ARGS $IMAGE /bin/bash
if [ -n "$TMP" ]; then rm -f $TMP; fi
